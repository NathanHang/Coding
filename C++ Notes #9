//Linked List as a header file. INCOMPLETE AND INCORRECT
#ifndef LIST_H
#define LIST_H
#include <iostream>
#include <assert.h>

class linkedList{
    private:
    struct node{
        int data;
        node* next;
        node* previous;
    };
    public:
    void add_start();
    void add_end();
    void remove_start();
    void remove_end();
    bool is_Empty();
    int get_start();
    int get_end();
    bool check();
    void printList();
    void printReversedList();
    int get_cursor();
    void begin_cursor();
    void move_cursor();
    void insert_cursor();
    void remove_cursor();
    
};

node* head = nullptr;
node* tail = nullptr;
node* cursor;

int size = 0;

void linkedList::add_start(int val){
    node* allocator = new node();
    allocator->data = val;
    if(head == nullptr){
        head = tail = allocator;
    }
    else{
        allocator->next = head;
        head->previous = allocator;
    }
    head = allocator;
    size++;
}

void linkedList::add_end(int num){ 
    node* allocator = new node();
    allocator->data = num;
    allocator->next = nullptr;
    if(head == nullptr){
        head = allocator;
    }
    else{
        tail->next = allocator;
        allocator->previous = tail;
    }
    tail = allocator;
    size++;
}

void linkedList::remove_start(){
    assert(size != 0);
    if(size == 1){
        delete head;
        head = tail = nullptr;
    }
    else{
        node* temp = head;
        head = head->next;
        delete temp;
        head->previous = nullptr;
    }
    size--;
}

void linkedList::remove_end(){
    assert(size != 0);
    if(size == 1){
        delete head;
        head = tail = nullptr;
    }
    else{
        node* temp = tail;
        tail = tail->previous;
        delete temp;
        tail->next = nullptr;
    }
    size--;
}

bool linkedList::is_Empty(){
    return(head == nullptr);
}

int linkedList::get_start(){
    return head->data;
}

int linkedList::get_end(){
    return tail->data;
}

bool linkedList::check(int input){
    for(node* i = head; i != nullptr; i=i->next){
        if(i->data == input){
            return true;
        }
    }
    return false;
}

void linkedList::printList(){
    node* temp = head;
    cout << "Here is the Linked List:" << endl;
    while(temp){
        cout << temp->data <<" ";
        temp = temp->next;
    }
    cout << endl;
}

void linkedList::printReversedList(){
    node* temp = tail;
    cout << "Reversed List:" << endl;
    while(temp){
        cout << temp->data << " ";
        temp = temp->previous;
    }
    cout << endl;
}

int linkedList::get_cursor(){
    assert(size > 0);
    return cursor->data;
}

void linkedList::begin_cursor(){
    if(head == nullptr){
        cursor == nullptr;
    }
    else{
        cursor = head;
    }
}

void linkedList::move_cursor(){
    assert(size > 0);
    cursor = cursor->next;
}

void linkedList::insert_cursor(int saidInput){
    assert(size > 0);
    if(cursor == tail){
        add_end(saidInput);
    }
    node* allocator = new node();
    allocator->data = saidInput;
    allocator->previous = cursor;
    allocator->next = cursor->next;
    cursor->next->previous = allocator;
    cursor->next = allocator;
    cursor = cursor->next;
}

void linkedList::remove_cursor(){
    assert(size > 0);
    node* temp;
    cursor->previous->next = cursor->next;
    cursor->next->previous = cursor->previous;
    temp = cursor;
    cursor = cursor->next;
    delete temp;
}
