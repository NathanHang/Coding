#include <iostream>

using namespace std;

struct node{
    int data;
    node* next;
};

node* head = nullptr;
node* tail = nullptr;

int size = 0;

void add_start(int val){
    node* allocator = new node();
    allocator->data = val;
    if(head == nullptr){
        head = tail = allocator;
    }
    else{
        allocator->next = head;
    }
    head = allocator;
    size++;
}

void add_end(int num){ 
    node* allocator = new node();
    allocator->data = num;
    allocator->next = nullptr;
    if(head == nullptr){
        head = allocator;
    }
    else{
        tail->next = allocator;
    }
    tail = allocator;
    size++;
}

bool is_empty(node* check){
    return (head == nullptr);
}

int get_start(){
    return head->data;
}

int main()
{
    /* To create an existing linked list
    node* new_node = new node;
    new_node->data = 0;
    new_node->next = nullptr;
    head = tail = new_node;
    
    add_end(1);
    add_end(5);
    add_end(4);
    add_end(19);
    add_end(12321321);
    add_start(483);
    add_start(34242);
    add_start(223);
    */
    
    add_end(6);
    add_start(8);
    add_end(5);
    add_start(9);
    add_end(2);
    add_start(3);
    add_end(10);
    add_start(11);
    add_end(1);
    add_start(4);
    
    cout << endl;
    cout << "Size of Linked List: " << size << endl;
    cout << "Here is the list: " << endl;

    node* cursor = head;

    while(cursor){
        cout << cursor->data <<" ";
        cursor = cursor->next;
    }

    cout << "\nSize: " << size << endl << "Head: " << head->data << endl << "Tail: " << tail->data << endl;
    
    cout << get_start();
    
    return 0;
}
