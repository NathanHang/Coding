//Linked List in C++.

#include <iostream>
#include <assert.h>

using namespace std;

struct node{
    int data;
    node* next;
    node* previous;
};

node* head = nullptr;
node* tail = nullptr;
node* cursor;

int size = 0;

void add_start(int val){
    node* allocator = new node();
    allocator->data = val;
    if(head == nullptr){
        head = tail = allocator;
    }
    else{
        allocator->next = head;
        head->previous = allocator;
    }
    head = allocator;
    size++;
}

void add_end(int num){ 
    node* allocator = new node();
    allocator->data = num;
    allocator->next = nullptr;
    if(head == nullptr){
        head = allocator;
    }
    else{
        tail->next = allocator;
        allocator->previous = tail;
    }
    tail = allocator;
    size++;
}

void remove_start(){
    assert(size != 0);
    if(size == 1){
        delete head;
        head = tail = nullptr;
    }
    else{
        node* temp = head;
        head = head->next;
        delete temp;
        head->previous = nullptr;
    }
    size--;
}

void remove_end(){
    assert(size != 0);
    if(size == 1){
        delete head;
        head = tail = nullptr;
    }
    else{
        node* temp = tail;
        tail = tail->previous;
        delete temp;
        tail->next = nullptr;
    }
    size--;
}

bool is_Empty(){
    return(head == nullptr);
}

int get_start(){
    return head->data;
}

int get_end(){
    return tail->data;
}

bool check(int input){
    for(node* i = head; i != nullptr; i=i->next){
        if(i->data == input){
            return true;
        }
    }
    return false;
}

void printList(){
    node* temp = head;
    cout << "Here is the Linked List:" << endl;
    while(temp){
        cout << temp->data <<" ";
        temp = temp->next;
    }
    cout << endl;
}

void printReversedList(){
    node* temp = tail;
    cout << "Reversed List:" << endl;
    while(temp){
        cout << temp->data << " ";
        temp = temp->previous;
    }
    cout << endl;
}

int get_cursor(){
    assert(size < 0);
    return cursor->data;
}

void begin_cursor(){
    if(head == nullptr){
        cursor == nullptr;
    }
    else{
        cursor = head;
    }
}

void move_cursor(){
    assert(size < 0);
    cursor = cursor->next;
}

void insert_cursor(listitem data){
    assert(size < 0);
 //Inserts a new element into the list in the position after the iterator

 //Precondition: List is not empty

 //Postcondition: The cursor pointed to the item inputed
    

}
void remove_cursor(){
    assert(size < 0);

 //Removes the element pointed at by the iterator

 //Precondition: The list must not be empty

 //Postcondition: cursor is removed
}

int main()
{
    int checker = 0;
    /* To create an existing linked list
    node* new_node = new node;
    new_node->data = 0;
    new_node->next = nullptr;
    head = tail = new_node;
    */
    
    printList();

    cout << "\nSize: " << size << endl << "Head: " << head->data << endl << "Tail: " << tail->data << endl;
    
    printReversedList();
    
    remove_start();
    
    cout << endl;
    
    cout << "Modified Size: " << size << endl;
    
    if(head == tail && head == nullptr){
        cout << "List is Empty" << endl;
    }
    else{
        cout << "List is not Empty" << endl;
    }
    
    printList();
    
    
    return 0;
}
