/*
This variation is when the converge array is a boolean array, basically a minor change/variant.

The Matrix of the problem:
    1   2   3   4   5
1   0   0   1   0   0
2   1   0   0   0   0
3   0   1/2 0   0   0
4   0   0   0   0   0
5   0   1/2 0   1   1
Teacher's Hints:
-Nested For Loop to do the math
-Consider when the values converge, and print them out
-When the pages are converged, stop the program
Equation:
Page Rank(of Page) = d*M*Pi + const
const = (1-d)/N
d = dampingFactor
N = number of Pages(there are 5 pages)
M = Matrix of Problem
Pi = unknown
*/
#include <iostream>
#include <vector>
#include <stdlib.h>

using namespace std;

int main()
{
    double dampingFactor = 0.85, constant = 0.0, dotProduct = 0.0, pageRank = 0.0, epilson = 0.0;
    int sumOfConvergeArray = 0;
    double estimatedProbability = 0;
    
    vector<vector<double>> graph
    {
        {0.0, 0.0, 1.0, 0.0, 0.0},
        {1.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.5, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.5, 0.0, 1.0, 1.0}
    };
    double pi[] = {1.0, 1.0, 1.0, 1.0, 1.0};
    
    bool converge[]= {false, false, false, false, false};
    int iteration[] = {0, 0, 0, 0, 0};
    
    constant = (1 - dampingFactor)/graph.size();
    cout << "Matrix for Problem: " << endl;
    for(int i = 0; i < graph.size(); i++){
        cout << "row " << i + 1 << ": ";
        for(int j = 0; j < graph[i].size(); j++){
            cout << "column " << j + 1 << ": " << graph[i][j] << ", ";
        }
        cout << endl;
    }
    cout << endl;
    cout << "Initial pagerank values:" << endl;
    for(int i = 0; i < sizeof(pi)/sizeof(pi[0]); i++){
        if(i < sizeof(pi)/sizeof(pi[0]) - 1){
            cout << pi[i] << ", ";
        }
        else{
            cout << pi[i];
        }
    }
    
    cout << endl;
    cout << endl;
    
    cout << "Input Epsilon:" << endl;
    cin >> epilson;
    
    cout << endl;
    cout << endl;
    
    while(sumOfConvergeArray != graph.size()){
        for(int i = 0; i < graph.size(); i++){
            dotProduct = 0;
            if(converge[i] == false){
                for(int j = 0; j < graph[i].size(); j++){
                    dotProduct += graph[i][j] * pi[j];
                }
                pageRank = dampingFactor * dotProduct + constant;
                if(abs(pageRank - pi[i]) < epilson){
                    converge[i] = true;
                    sumOfConvergeArray += 1;
                }
                else{
                    iteration[i] += 1;
                }
                pi[i] = pageRank;
            }
        }
    }
    cout << "Final page rank values:" << endl;
    for(int i = 0; i < sizeof(pi)/sizeof(pi[0]); i++){
        if(i < sizeof(pi)/sizeof(pi[0]) - 1){
            cout << "Page " << i + 1 << ": " << pi[i] << ", ";
        }
        else{
            cout << "Page " << i + 1 << ": " << pi[i];
        }
    }
    
    cout << endl;
    cout << endl;
    
    cout << "Iterations to converge:" << endl;
    for(int i = 0; i < sizeof(iteration)/sizeof(iteration[0]); i++){
        if(i < sizeof(iteration)/sizeof(iteration[0]) - 1){
            cout << "Page " << i + 1 << ": " << iteration[i] << ", ";
        }
        else{
            cout << "Page " << i + 1 << ": " << iteration[i];
        }
    }
    
    for(int i = 0; i < sizeof(pi)/sizeof(pi[0]); i++){
        estimatedProbability += pi[i];
    }
    
    cout << endl;
    cout << endl;
    
    cout << "Added page rank values:" << endl;
    cout << estimatedProbability;
    
    return 0;
}
