/*
The Matrix of the problem:
    1   2   3   4   5
1   0   0   1   0   0
2   1   0   0   0   0
3   0   1/2 0   0   0
4   0   0   0   0   0
5   0   1/2 0   1   1
Teacher's Hints:
-Nested For Loop to do the math
-Consider when the values converge, and print them out
-When the pages are converged, stop the program
Equation:
Page Rank(of Page) = d*M*Pi + const
const = (1-d)/N
d = dampingFactor
N = number of Pages(there are 5 pages)
M = Matrix of Problem
Pi = unknown
*/
#include <iostream>
#include <vector>
#include <stdlib.h>

using namespace std;

int main()
{
    int dampingFactor = 0.85, constant = 0, dotProduct = 0, pageRank = 0;
    int i = 0, j = 0;
    constant = (1 - dampingFactor)/5;
    int epilson = 0.0001;
    
    vector<vector<double>> graph
    {
        {0.0, 0.0, 1.0, 0.0, 0.0},
        {1.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.5, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.5, 0.0, 1.0, 1.0}
    };
    int pi[] = {1, 1, 1, 1, 1};
    
    int converge[]= {0, 0, 0, 0, 0};
    
    cout << "Matrix for Problem" << endl;
    for(int i = 0; i < graph.size(); i++){
        cout << "row " << i + 1 << ": ";
        for(int j = 0; j < graph[i].size(); j++){
            cout << "column " << j + 1 << ": " << graph[i][j] << ", ";
        }
        cout << endl;
    }
    cout << endl;
    cout << "Values of pi" << endl;
    for(int i = 0; i < sizeof(pi)/sizeof(pi[0]); i++){
        cout << pi[i] << " ";
    }
    
    while( != graph.size()){
        for(i = 0; i < graph.size(); i++){
            dotProduct = 0;
            if(converge[i] == 0){
                for(j = 0; i < graph[i].size(); j++){
                    dotProduct += graph[i][j] * pi[i][j]
                }
                pageRank = dampingFactor * dotProduct + constant
                if(abs(pageRank - pi[i]) < epilson){
                    converge[i] = 1;
                }
                pi[i] = pageRank;
            }
        }
    }
    
    return 0;
}
